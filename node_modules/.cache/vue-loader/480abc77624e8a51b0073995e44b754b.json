{"remainingRequest":"/Users/funkim/giftbox_bootstrap/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/funkim/giftbox_bootstrap/src/components/HelloWorld.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/funkim/giftbox_bootstrap/src/components/HelloWorld.vue","mtime":1601997181186},{"path":"/Users/funkim/giftbox_bootstrap/node_modules/cache-loader/dist/cjs.js","mtime":1599900938518},{"path":"/Users/funkim/giftbox_bootstrap/node_modules/babel-loader/lib/index.js","mtime":1599900938486},{"path":"/Users/funkim/giftbox_bootstrap/node_modules/cache-loader/dist/cjs.js","mtime":1599900938518},{"path":"/Users/funkim/giftbox_bootstrap/node_modules/vue-loader/lib/index.js","mtime":1599900939023}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["HelloWorld.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAkfile":"HelloWorld.vue","sourceRoot":"src/components","sourcesContent":["<template>\n    <b-container class=\"bv-example-row mt-md-5 mt-4 mb-md-5 mb-4\">\n        <h1>파일 리스트</h1>\n        <div v-for=\"(file, index) in fileList\" :key=\"file.Key\">\n            #{{index+1}} {{file.Key}}\n            <b-button @click=\"deleteFile(file.Key)\" color=\"res\">x</b-button>\n        </div>\n\n        <h1>파일 업로더</h1>\n        <input id=\"file-selector\" ref=\"file\" type=\"file\" @change=\"handleFileUplpad()\">\n        <b-button @click=\"uploadFile\" color=\"primary\">업12로드</b-button>\n\n        <ckeditor :editor=\"editor\" v-model=\"editorData\" :config=\"editorConfig\"></ckeditor>\n    </b-container>\n</template>\n\n\n<script>\n    import AWS from 'aws-sdk'\n    import CKEditor from '@ckeditor/ckeditor5-vue'\n    import ClassicEditor from '@ckeditor/ckeditor5-build-classic';\n\n    export default {\n        data () {\n            return {\n                file: null,\n                albumBucketName: process.env.VUE_APP_BUCKET,\n                bucketRegion: process.env.VUE_APP_REGION,\n                IdentityPoolId: process.env.VUE_APP_IdentityPoolId,\n                fileList:[],\n                editor: ClassicEditor,\n                editorData: '<p>Content of the editor.</p>',\n                editorConfig: {\n                    // The configuration of the editor.\n                    // 'extraPlugins': [uploader]\n                    extraPlugins: [MyCustomUploadAdapterPlugin],\n                }\n            }\n        },\n\n        created () {\n            //this.getFiles()\n            console.log(\"Parent created\")\n        },\n        mounted() { \n            console.log(\"Parent mounted\") \n        },\n\n        methods: {\n            store()\n            {\n                // Some code\n            },\n\n            uploader(editor)\n            {\n                console.log(editor)\n                // editor.plugins.get( 'FileRepository' ).createUploadAdapter = ( loader ) => {\n                //     return new UploadAdapter( loader );\n                // };\n            },\n\n            handleFileUplpad () {\n                this.file = this.$refs.file.files[0]\n                console.log(this.file, '파일이 업로드 되었습니다')\n            },\n\n            getFiles () {\n                AWS.config.update({\n                    region: this.bucketRegion,\n                    credentials: new AWS.CognitoIdentityCredentials({\n                        IdentityPoolId: this.IdentityPoolId\n                    })\n                })\n\n                const s3 = new AWS.S3({\n                    apiVersion: '2006-03-01',\n                    params: {\n                        Bucket: this.albumBucketName\n                    }\n                })\n\n                s3.listObjects({\n                    Delimiter: '/'\n                }, (err, data) => {\n                    if (err) {\n                      return alert('There was an error listing your albums: ' + err.message);\n                  } else {\n                    this.fileList = data.Contents\n                  }\n              });\n            },\n            uploadFile () {\n                AWS.config.update({\n                    region: this.bucketRegion,\n                    credentials: new AWS.CognitoIdentityCredentials({\n                        IdentityPoolId: this.IdentityPoolId\n                    })\n                })\n\n                const s3 = new AWS.S3({\n                    apiVersion: '2006-03-01',\n                    params: {\n                        Bucket: this.albumBucketName\n                    }\n                })\n\n                let photoKey = 'upload/'+this.file.name\n\n                s3.upload({\n                    Key: photoKey,\n                    Body: this.file,\n                    ACL: 'public-read'\n                }, (err, data) => {\n                    if (err) {\n                        return alert('There was an error uploading your photo: ', err.message);\n                    }\n                });\n            },\n\n            deleteFile (Key) {\n                AWS.config.update({\n                    region: this.bucketRegion,\n                    credentials: new AWS.CognitoIdentityCredentials({\n                        IdentityPoolId: this.IdentityPoolId\n                    })\n                })\n\n                const s3 = new AWS.S3({\n                    apiVersion: '2006-03-01',\n                    params: {\n                        Bucket: this.albumBucketName\n                    }\n                })\n\n                s3.deleteObject({\n                    Key: Key\n                }, (err, data) => {\n                    if (err) {\n                        return alert('There was an error deleting your photo: ', err.message);\n                    }\n                    alert('삭제되었습니다.')\n                    this.getFiles()\n                });\n            },\n        }\n    }\n\n    class UploadAdapter {\n      constructor(loader) {\n          this.loader = loader;\n      }\n      upload() {\n          return this.loader.file.then( file => new Promise(((resolve, reject) => {\n              this._initRequest();\n              this._initListeners( resolve, reject, file );\n              this._sendRequest( file );\n          })))\n      }\n\n      _initRequest() {\n          const xhr = this.xhr = new XMLHttpRequest();\n          xhr.open('POST', 'https://dev-hourfun-front.s3.ap-northeast-2.amazonaws.com/upload/', true);\n          xhr.responseType = 'json';\n          console.log(xhr)\n      }\n\n      _initListeners(resolve, reject, file) {\n          const xhr = this.xhr;\n          const loader = this.loader;\n          const genericErrorText = '파일을 업로드 할 수 없습니다.'\n          xhr.addEventListener('error', () => {reject(genericErrorText)})\n          xhr.addEventListener('abort', () => reject())\n          console.log(xhr)\n          xhr.addEventListener('load', () => {\n              const response = xhr.response\n              if(!response || response.error) {\n                  return reject( response && response.error ? response.error.message : genericErrorText );\n              }\n\n              resolve({\n                  default: response.url //업로드된 파일 주소\n              })\n          })\n      }\n\n      _sendRequest(file) {\n           AWS.config.update({\n               region: process.env.VUE_APP_REGION,\n               credentials: new AWS.CognitoIdentityCredentials({\n                   IdentityPoolId: process.env.VUE_APP_IdentityPoolId\n               })\n           })\n           const s3 = new AWS.S3({\n               apiVersion: '2006-03-01',\n               params: {\n                   Bucket: process.env.VUE_APP_BUCKET\n               }\n           })\n\n           // if(file.size > 5000){\n           //     return alert('용량이 너무 큼니다.')\n           // }\n           console.log(file)\n           let photoKey = 'upload/'+file.name\n           s3.upload({\n               Key: photoKey,\n               Body: file,\n               ACL: 'public-read'\n           }, (err, data) => {\n               if (err) {\n                   return console.log('There was an error uploading your photo: ', err.message);\n               }\n               console.log(data, 'upload end')\n           });\n      }\n  }\n\n  function MyCustomUploadAdapterPlugin(editor) {\n      editor.plugins.get('FileRepository').createUploadAdapter = (loader) => {\n          return new UploadAdapter(loader)\n      }\n  }\n</script>\n"]}]}