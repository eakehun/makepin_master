{"remainingRequest":"/Users/funkim/giftbox_bootstrap/node_modules/thread-loader/dist/cjs.js!/Users/funkim/giftbox_bootstrap/node_modules/babel-loader/lib/index.js!/Users/funkim/giftbox_bootstrap/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/funkim/giftbox_bootstrap/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/funkim/giftbox_bootstrap/src/components/HelloWorld.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/funkim/giftbox_bootstrap/src/components/HelloWorld.vue","mtime":1601996544893},{"path":"/Users/funkim/giftbox_bootstrap/node_modules/cache-loader/dist/cjs.js","mtime":1599900938518},{"path":"/Users/funkim/giftbox_bootstrap/node_modules/thread-loader/dist/cjs.js","mtime":1599900938828},{"path":"/Users/funkim/giftbox_bootstrap/node_modules/babel-loader/lib/index.js","mtime":1599900938486},{"path":"/Users/funkim/giftbox_bootstrap/node_modules/cache-loader/dist/cjs.js","mtime":1599900938518},{"path":"/Users/funkim/giftbox_bootstrap/node_modules/vue-loader/lib/index.js","mtime":1599900939023}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["HelloWorld.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n    <b-container class=\"bv-example-row mt-md-5 mt-4 mb-md-5 mb-4\">\n        <h1>파일 리스트</h1>\n        <div v-for=\"(file, index) in fileList\" :key=\"file.Key\">\n            #{{index+1}} {{file.Key}}\n            <b-button @click=\"deleteFile(file.Key)\" color=\"res\">x</b-button>\n        </div>\n\n        <h1>파일 업로더</h1>\n        <input id=\"file-selector\" ref=\"file\" type=\"file\" @change=\"handleFileUplpad()\">\n        <b-button @click=\"uploadFile\" color=\"primary\">업12로드</b-button>\n\n        <ckeditor :editor=\"editor\" v-model=\"editorData\" :config=\"editorConfig\"></ckeditor>\n    </b-container>\n</template>\n\n\n<script>\n    import AWS from 'aws-sdk'\n    import CKEditor from '@ckeditor/ckeditor5-vue'\n    import ClassicEditor from '@ckeditor/ckeditor5-build-classic';\n\n    export default {\n        data () {\n            return {\n                file: null,\n                albumBucketName: 'dev-hourfun-front',\n                bucketRegion: 'ap-northeast-2',\n                IdentityPoolId: 'ap-northeast-2:ec6e1a06-8cca-488e-836d-8f5e3d3eb6b5',\n                fileList:[],\n                editor: ClassicEditor,\n                editorData: '<p>Content of the editor.</p>',\n                editorConfig: {\n                    // The configuration of the editor.\n                    // 'extraPlugins': [uploader]\n                    extraPlugins: [MyCustomUploadAdapterPlugin],\n                }\n            }\n        },\n\n        created () {\n            //this.getFiles()\n            console.log(\"Parent created\")\n        },\n        mounted() { \n            console.log(\"Parent mounted\") \n        },\n\n        methods: {\n            store()\n            {\n                // Some code\n            },\n\n            uploader(editor)\n            {\n                console.log(editor)\n                // editor.plugins.get( 'FileRepository' ).createUploadAdapter = ( loader ) => {\n                //     return new UploadAdapter( loader );\n                // };\n            },\n\n            handleFileUplpad () {\n                this.file = this.$refs.file.files[0]\n                console.log(this.file, '파일이 업로드 되었습니다')\n            },\n\n            getFiles () {\n                AWS.config.update({\n                    region: this.bucketRegion,\n                    credentials: new AWS.CognitoIdentityCredentials({\n                        IdentityPoolId: this.IdentityPoolId\n                    })\n                })\n\n                const s3 = new AWS.S3({\n                    apiVersion: '2006-03-01',\n                    params: {\n                        Bucket: this.albumBucketName\n                    }\n                })\n\n                s3.listObjects({\n                    Delimiter: '/'\n                }, (err, data) => {\n                    if (err) {\n                      return alert('There was an error listing your albums: ' + err.message);\n                  } else {\n                    this.fileList = data.Contents\n                  }\n              });\n            },\n            uploadFile () {\n                AWS.config.update({\n                    region: this.bucketRegion,\n                    credentials: new AWS.CognitoIdentityCredentials({\n                        IdentityPoolId: this.IdentityPoolId\n                    })\n                })\n\n                const s3 = new AWS.S3({\n                    apiVersion: '2006-03-01',\n                    params: {\n                        Bucket: this.albumBucketName\n                    }\n                })\n\n                let photoKey = this.file.name\n\n                s3.upload({\n                    Key: photoKey,\n                    Body: this.file,\n                    ACL: 'public-read'\n                }, (err, data) => {\n                    if (err) {\n                        return alert('There was an error uploading your photo: ', err.message);\n                    }\n                    this.getFiles()\n                });\n            },\n\n            deleteFile (Key) {\n                AWS.config.update({\n                    region: this.bucketRegion,\n                    credentials: new AWS.CognitoIdentityCredentials({\n                        IdentityPoolId: this.IdentityPoolId\n                    })\n                })\n\n                const s3 = new AWS.S3({\n                    apiVersion: '2006-03-01',\n                    params: {\n                        Bucket: this.albumBucketName\n                    }\n                })\n\n                s3.deleteObject({\n                    Key: Key\n                }, (err, data) => {\n                    if (err) {\n                        return alert('There was an error deleting your photo: ', err.message);\n                    }\n                    alert('삭제되었습니다.')\n                    this.getFiles()\n                });\n            },\n        }\n    }\n\n    class UploadAdapter {\n      constructor(loader) {\n          this.loader = loader;\n      }\n      upload() {\n          return this.loader.file.then( file => new Promise(((resolve, reject) => {\n              this._initRequest();\n              this._initListeners( resolve, reject, file );\n              this._sendRequest( file );\n          })))\n      }\n\n      _initRequest() {\n          const xhr = this.xhr = new XMLHttpRequest();\n          xhr.open('POST', 'https://dev-hourfun-front.s3.ap-northeast-2.amazonaws.com/upload/', true);\n          xhr.responseType = 'json';\n          console.log(xhr)\n      }\n\n      _initListeners(resolve, reject, file) {\n          const xhr = this.xhr;\n          const loader = this.loader;\n          const genericErrorText = '파일을 업로드 할 수 없습니다.'\n          xhr.addEventListener('error', () => {reject(genericErrorText)})\n          xhr.addEventListener('abort', () => reject())\n          console.log(xhr)\n          xhr.addEventListener('load', () => {\n              const response = xhr.response\n              if(!response || response.error) {\n                  return reject( response && response.error ? response.error.message : genericErrorText );\n              }\n\n              resolve({\n                  default: response.url //업로드된 파일 주소\n              })\n          })\n      }\n\n      _sendRequest(file) {\n           AWS.config.update({\n               region: 'ap-northeast-2',\n               credentials: new AWS.CognitoIdentityCredentials({\n                   IdentityPoolId: process.env.VUE_APP_IdentityPoolId\n               })\n           })\n           const s3 = new AWS.S3({\n               apiVersion: '2006-03-01',\n               params: {\n                   Bucket: 'dev-hourfun-front'\n               }\n           })\n\n           // if(file.size > 5000){\n           //     return alert('용량이 너무 큼니다.')\n           // }\n           console.log(file)\n           let photoKey = 'upload/'+file.name\n           s3.upload({\n               Key: photoKey,\n               Body: file,\n               ACL: 'public-read'\n           }, (err, data) => {\n               if (err) {\n                   return console.log('There was an error uploading your photo: ', err.message);\n               }\n               console.log(data, 'upload end')\n           });\n      }\n  }\n\n  function MyCustomUploadAdapterPlugin(editor) {\n      editor.plugins.get('FileRepository').createUploadAdapter = (loader) => {\n          return new UploadAdapter(loader)\n      }\n  }\n</script>\n"],"sourceRoot":"src/components"}]}